This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-22T00:25:00.487Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  check-changelog.ts
.eslintrc.json
.gitignore
action.yaml
package.json
README.md

================================================================
Files
================================================================

================
File: src/check-changelog.ts
================
import { exec } from '@actions/exec';
import { getOctokit } from '@actions/github';
import { Context } from '@actions/github/lib/context';
import * as core from '@actions/core';
import * as fs from 'fs';

interface CheckChangelogOptions {
  github: ReturnType<typeof getOctokit>;
  context: Context;
  core: typeof import('@actions/core');
  baseSha: string;
  headSha: string;
}

interface ChangelogEntry {
  header: string;
  content: string[];
  lineNumber: number;
}

export async function checkChangelog(options: CheckChangelogOptions): Promise<void> {
  const { github, context, core, baseSha, headSha } = options;

  try {
    // Get diff with base branch
    let diffOutput = '';
    await exec('git', ['diff', baseSha, headSha, '--', 'CHANGELOG.md'], {
      listeners: {
        stdout: (data: Buffer) => {
          diffOutput += data.toString();
        }
      }
    });

    // Read current CHANGELOG
    const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
    const lines = changelog.split('\n');

    // Find new headers in diff
    const newHeaders = diffOutput
      .split('\n')
      .filter(line => line.startsWith('+## ['))
      .map(line => line.substring(1)); // Remove the '+' prefix

    const emptyEntries: ChangelogEntry[] = [];

    for (const header of newHeaders) {
      const headerIndex = lines.findIndex(line => line === header);
      if (headerIndex === -1) continue;

      const nextHeaderIndex = lines
        .slice(headerIndex + 1)
        .findIndex(line => line.startsWith('## ['));

      const endIndex = nextHeaderIndex === -1
        ? lines.length
        : headerIndex + 1 + nextHeaderIndex;

      const content = lines
        .slice(headerIndex + 1, endIndex)
        .filter(line => line.trim() && !line.startsWith('## ['));

      if (content.length === 0) {
        emptyEntries.push({
          header: header.trim(),
          content: [],
          lineNumber: headerIndex + 1
        });
      }
    }

    if (emptyEntries.length > 0) {
      const headers = emptyEntries.map(entry => entry.header);
      core.setOutput('has_empty_changelog', 'true');
      core.setOutput('empty_headers', headers.join('\n'));

      const warningMessage = [
        'ðŸš¨ Empty changelog entries detected:',
        ...headers.map(h => `- ${h} (No content provided)`)
      ].join('\n');

      core.warning(warningMessage);
    } else {
      core.setOutput('has_empty_changelog', 'false');
      core.setOutput('empty_headers', '');
    }
  } catch (error) {
    if (error instanceof Error) {
      core.setFailed(`Action failed: ${error.message}`);
    } else {
      core.setFailed('Action failed with unknown error');
    }
  }
}

================
File: .eslintrc.json
================
{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "root": true
}

================
File: .gitignore
================
dist/
node_modules/
coverage/
*.log

================
File: action.yaml
================
name: 'Empty Changelog Check'
description: 'Check for empty changelog entries in pull requests'
author: 'your-username'

inputs:
  github-token:
    description: 'GitHub token for API operations'
    required: true
    default: ${{ github.token }}
  label-name:
    description: 'Label to add when empty changelog is detected'
    required: false
    default: 'empty-changelog'

outputs:
  has_empty_changelog:
    description: 'Whether empty changelog entries were found'
  empty_headers:
    description: 'List of empty changelog headers'

runs:
  using: 'node20'
  main: 'dist/index.js'

branding:
  icon: 'alert-circle'
  color: 'yellow'

================
File: package.json
================
{
  "name": "empty-changelog-check",
  "version": "1.0.0",
  "description": "GitHub Action to check for empty changelog entries",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "test": "jest",
    "lint": "eslint src/**/*.ts"
  },
  "dependencies": {
    "@actions/core": "^1.10.1",
    "@actions/exec": "^1.1.1",
    "@actions/github": "^6.0.0"
  },
  "devDependencies": {
    "@types/jest": "^29.5.11",
    "@types/node": "^20.11.0",
    "@typescript-eslint/eslint-plugin": "^6.18.1",
    "@typescript-eslint/parser": "^6.18.1",
    "eslint": "^8.56.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.1.1",
    "typescript": "^5.3.3"
  }
}

================
File: README.md
================
# Empty Changelog Check Action

A GitHub Action that checks for empty changelog entries in pull requests.

## Features

- Detects newly added changelog entries without content
- Adds a customizable label to PRs with empty changelog entries
- Provides detailed output about empty entries
- Supports customization through inputs

## Usage

```yaml
- uses: babarot/changelog-empty-check-action@v1
  with:
    github-token: ${{ secrets.GITHUB_TOKEN }}
    label-name: 'empty-changelog'  # optional
```

## Inputs

| Name | Description | Required | Default |
|------|-------------|----------|---------|
| `github-token` | GitHub token for API operations | Yes | `${{ github.token }}` |
| `label-name` | Label to add when empty changelog is detected | No | `empty-changelog` |

## Outputs

| Name | Description |
|------|-------------|
| `has_empty_changelog` | Whether empty changelog entries were found (`'true'` or `'false'`) |
| `empty_headers` | Newline-separated list of empty changelog headers |

## Example

```yaml
name: Check Empty Changelog

on:
  pull_request:
    paths:
      - 'CHANGELOG.md'

jobs:
  check-changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: your-username/changelog-empty-check-action@v1
        id: check
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
```

## Development

1. Clone the repository
2. Install dependencies: `npm install`
3. Make changes in `src/`
4. Run tests: `npm test`
5. Build: `npm run build`

## License

MIT

## Contributing

Contributions are welcome! Please read our contributing guidelines and submit pull requests.

## Versioning

We use SemVer for versioning. For the versions available, see the tags on this repository.



================================================================
End of Codebase
================================================================
